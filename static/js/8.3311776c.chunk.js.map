{"version":3,"sources":["views/Vaccination/index.js"],"names":["DATA_URL_STATES","VACCINE_SETU_API","DATA_URL_DISTRICTS","DATA_DISTRICTS","DATA_URL_PINCODE","useStyles","makeStyles","formControl","marginTop","minWidth","textTransform","fontWeight","dataCard","secondaryText","color","Vaccination","classes","React","useState","status","setStatus","valueRadio","setRadioValue","valueStates","setStatesValue","valueDistricts","setDistrictsValue","valuePincode","setPincodeValue","valueDisable","setDisable","dataStates","setStates","dataDistricts","setDistricts","dataData","setData","getStates","a","fetch","then","response","json","states","useEffect","container","spacing","gridSpacing","item","xs","variant","align","sm","direction","justify","component","aria-label","name","value","onChange","event","target","control","label","className","id","labelId","districts","getDistricts","Object","keys","map","data","index","key","state_name","disabled","district_id","district_name","noValidate","autoComplete","inputMode","onBlur","size","onClick","getDateData","Date","centers","getDataByPincode","getDataByDistrict","address","pincode","fee_type","sessions","date","min_age_limit","available_capacity_dose1","available_capacity_dose2"],"mappings":"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","file":"static/js/8.3311776c.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, Grid, Typography, FormControl, FormControlLabel, RadioGroup, Radio, InputLabel, MenuItem, Select, TextField, Button, CardContent } from '@material-ui/core';\nimport { gridSpacing, VACCINE_SETU_API, getDateData } from './../../store/constant';\nconst DATA_URL_STATES = `${VACCINE_SETU_API}/admin/location/states`;\nconst DATA_URL_DISTRICTS = `${VACCINE_SETU_API}/admin/location/districts/`;\nconst DATA_DISTRICTS = `${VACCINE_SETU_API}/appointment/sessions/public/calendarByDistrict?district_id=`;\nconst DATA_URL_PINCODE = `${VACCINE_SETU_API}/appointment/sessions/public/calendarByPin?pincode=`;\n\nconst useStyles = makeStyles(() => ({\n    formControl: {\n        marginTop: 10,\n        minWidth: '100%',\n        textTransform: 'none',\n        fontWeight: 'normal',\n    },\n    dataCard: {\n        marginTop: '1rem',\n    },\n    secondaryText: {\n        color: '#9E9E9E'\n    }\n}));\n\nconst Vaccination = () => {\n    const classes = useStyles();\n    const [status, setStatus] = React.useState(0);\n    const [valueRadio, setRadioValue] = React.useState('pincode');\n    const [valueStates, setStatesValue] = React.useState('');\n    const [valueDistricts, setDistrictsValue] = React.useState('');\n    const [valuePincode, setPincodeValue] = React.useState('');\n    const [valueDisable, setDisable] = React.useState(true);\n    const [dataStates, setStates] = React.useState([]);\n    const [dataDistricts, setDistricts] = React.useState([]);\n    const [dataData, setData] = React.useState([]);\n\n    const getStates = async () => {\n        await fetch(DATA_URL_STATES)\n            .then((response) => {\n                return response.json();\n            })\n            .then((json) => {\n                setStates(json.states);\n            });\n    }\n\n    const handleRadioChange = (event) => {\n        setRadioValue(event.target.value);\n\n        if (event.target.value === 'district') {\n            setStatus(1)\n        }\n        else {\n            setStatus(0)\n        }\n    };\n\n    const handlePincodeChange = (event) => {\n        setPincodeValue(event.target.value);\n    };\n\n    const handleDistrictChange = (event) => {\n        setDistrictsValue(event.target.value);\n    };\n\n    const handleStatesChange = (event) => {\n        setStatesValue(event.target.value);\n        setDisable(false);\n        const getDistricts = async () => {\n            await fetch(DATA_URL_DISTRICTS + event.target.value)\n                .then((response) => {\n                    return response.json();\n                })\n                .then((json) => {\n                    setDistricts(json.districts);\n                });\n        }\n\n        getDistricts();\n    };\n\n    const handleCheckSlots = () => {\n        if (valueRadio === 'pincode') {\n            const getDataByPincode = async () => {\n                await fetch(DATA_URL_PINCODE + valuePincode + '&date=' + getDateData(new Date()))\n                    .then((response) => {\n                        return response.json();\n                    })\n                    .then((json) => {\n                        setData(json.centers);\n                    });\n            }\n\n            getDataByPincode();\n        }\n        else {\n            const getDataByDistrict = async () => {\n                await fetch(DATA_DISTRICTS + valueDistricts + '&date=' + getDateData(new Date()))\n                    .then((response) => {\n                        return response.json();\n                    })\n                    .then((json) => {\n                        setData(json.centers);\n                    });\n            }\n\n            getDataByDistrict();\n        }\n    }\n\n    React.useEffect(() => {\n        getStates();\n    }, []);\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <Typography variant=\"h2\" align=\"center\">\n                    Vaccination Slot Finder\n                </Typography>\n            </Grid>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12} sm={3}>\n                    <Grid container direction=\"column\" justify=\"center\" spacing={gridSpacing}>\n                        <Grid item xs={12}>\n                            <FormControl component=\"fieldset\">\n                                <RadioGroup aria-label=\"select\" name=\"select\" value={valueRadio} onChange={handleRadioChange}>\n                                    <FormControlLabel value=\"pincode\" control={<Radio />} label=\"Pincode\" />\n                                    <FormControlLabel value=\"district\" control={<Radio />} label=\"District\" />\n                                </RadioGroup>\n                            </FormControl>\n                        </Grid>\n                        {status ? (\n                            <Grid item xs={12}>\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\n                                    <InputLabel id=\"selectStates\">States</InputLabel>\n                                    <Select\n                                        labelId=\"selectStates\"\n                                        id=\"selectStates\"\n                                        onChange={handleStatesChange}\n                                        value={valueStates}\n                                        label=\"States\"\n                                    >\n                                        {Object.keys(dataStates).map((data, index) => (\n                                            <MenuItem key={index} value={data}>{dataStates[data].state_name}</MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                                <FormControl variant=\"outlined\" className={classes.formControl} disabled={valueDisable}>\n                                    <InputLabel id=\"selectDistricts\">Districts</InputLabel>\n                                    <Select\n                                        labelId=\"selectDistricts\"\n                                        id=\"selectDistricts\"\n                                        onChange={handleDistrictChange}\n                                        value={valueDistricts}\n                                        label=\"Districts\"\n                                    >\n                                        {Object.keys(dataDistricts).map((data, index) => (\n                                            <MenuItem key={index} value={dataDistricts[data].district_id}>{dataDistricts[data].district_name}</MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                        ) :\n                            <Grid item xs={12}>\n                                <form noValidate autoComplete=\"off\">\n                                    <TextField\n                                        inputMode=\"numeric\"\n                                        className={classes.formControl}\n                                        id=\"pincode\"\n                                        onBlur={handlePincodeChange}\n                                        label=\"Pincode\"\n                                        variant=\"outlined\" />\n                                </form>\n                            </Grid>\n                        }\n                        <Grid item xs={12}>\n                            <Button size=\"large\" className={classes.formControl} variant=\"contained\" color=\"primary\" onClick={handleCheckSlots}>\n                                Check Slots\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} sm={9}>\n                    {Object.keys(dataData).map((data, index) => (\n                        <Card key={index} className={classes.dataCard}>\n                            <CardContent>\n                                <Grid container>\n                                    <Grid item xs={11}>\n                                        {dataData[data].name}\n                                        <div className={classes.secondaryText}>\n                                            {dataData[data].address}, {dataData[data].state_name} - {dataData[data].pincode}\n                                        </div>\n                                    </Grid>\n                                    <Grid item xs={1} container justify=\"flex-end\">\n                                        {dataData[data].fee_type}\n                                    </Grid>\n                                    {Object.keys(dataData[data].sessions).map((sessions, index) => (\n                                        <Grid key={index} container className={classes.dataCard}>\n                                            <Grid item xs={6}>\n                                                {dataData[data].sessions[sessions].date}\n                                            </Grid>\n                                            <Grid item xs={6} container justify=\"flex-end\">\n                                                Age: {dataData[data].sessions[sessions].min_age_limit}+\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                Dose 1: {dataData[data].sessions[sessions].available_capacity_dose1}\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                Dose 2: {dataData[data].sessions[sessions].available_capacity_dose2}\n                                            </Grid>\n                                        </Grid>\n                                    ))}\n                                </Grid>\n                            </CardContent>\n                        </Card>\n                    ))}\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Vaccination;\n"],"sourceRoot":""}