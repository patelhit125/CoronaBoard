{"version":3,"sources":["views/Vaccination/index.js"],"names":["DATA_URL_STATES","VACCINE_SETU_API","DATA_URL_DISTRICTS","DATA_DISTRICTS","DATA_URL_PINCODE","useStyles","makeStyles","theme","formControl","marginTop","minWidth","textTransform","fontWeight","borderColor","palette","secondary","main","height","dataCard","secondaryText","color","wordWrap","colorSuccess","success","space","Vaccination","classes","useTheme","React","useState","status","setStatus","valueRadio","setRadioValue","valueStates","setStatesValue","valueDistricts","setDistrictsValue","valuePincode","setPincodeValue","valueDisable","setDisable","isData","setDataData","dataStates","setStates","dataDistricts","setDistricts","dataData","setData","getStates","a","fetch","then","response","json","states","useEffect","container","spacing","gridSpacing","item","xs","variant","align","sm","direction","justify","component","aria-label","name","value","onChange","event","target","control","label","className","id","labelId","districts","getDistricts","Object","keys","map","data","index","key","state_name","disabled","district_id","district_name","noValidate","autoComplete","error","inputMode","onBlur","size","onClick","getDateData","Date","ok","undefined","centers","length","catch","console","log","getDataByPincode","getDataByDistrict","address","pincode","style","backgroundColor","fee_type","warning","sessions","date","min_age_limit","available_capacity_dose1","vaccine","available_capacity_dose2"],"mappings":"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","file":"static/js/8.81a8003a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Card, Grid, Typography, FormControl, FormControlLabel, RadioGroup, Radio, InputLabel, MenuItem, Select, TextField, Button, CardContent, Chip } from '@material-ui/core';\r\nimport { gridSpacing, VACCINE_SETU_API, getDateData } from './../../store/constant';\r\nconst DATA_URL_STATES = `${VACCINE_SETU_API}/admin/location/states`;\r\nconst DATA_URL_DISTRICTS = `${VACCINE_SETU_API}/admin/location/districts/`;\r\nconst DATA_DISTRICTS = `${VACCINE_SETU_API}/appointment/sessions/public/calendarByDistrict?district_id=`;\r\nconst DATA_URL_PINCODE = `${VACCINE_SETU_API}/appointment/sessions/public/calendarByPin?pincode=`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        marginTop: 10,\r\n        minWidth: '100%',\r\n        textTransform: 'none',\r\n        fontWeight: 'normal',\r\n        \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n            borderColor: theme.palette.secondary.main,\r\n        },\r\n        height: '3.25rem'\r\n    },\r\n    dataCard: {\r\n        marginTop: '1rem',\r\n    },\r\n    secondaryText: {\r\n        color: theme.palette.secondary.main,\r\n        wordWrap: 'break-word'\r\n    },\r\n    colorSuccess: {\r\n        color: theme.palette.success.main,\r\n    },\r\n    space: {\r\n        wordWrap: 'break-word'\r\n    }\r\n}));\r\n\r\nconst Vaccination = () => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [status, setStatus] = React.useState(0);\r\n    const [valueRadio, setRadioValue] = React.useState('pincode');\r\n    const [valueStates, setStatesValue] = React.useState('');\r\n    const [valueDistricts, setDistrictsValue] = React.useState('');\r\n    const [valuePincode, setPincodeValue] = React.useState('');\r\n    const [valueDisable, setDisable] = React.useState(true);\r\n    const [isData, setDataData] = React.useState(false);\r\n    const [dataStates, setStates] = React.useState([]);\r\n    const [dataDistricts, setDistricts] = React.useState([]);\r\n    const [dataData, setData] = React.useState([]);\r\n\r\n    const getStates = async () => {\r\n        await fetch(DATA_URL_STATES)\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((json) => {\r\n                setStates(json.states);\r\n            })\r\n    }\r\n\r\n    const handleRadioChange = (event) => {\r\n        setRadioValue(event.target.value);\r\n\r\n        if (event.target.value === 'district') {\r\n            setStatus(1)\r\n        }\r\n        else {\r\n            setStatus(0)\r\n        }\r\n    };\r\n\r\n    const handlePincodeChange = (event) => {\r\n        setPincodeValue(event.target.value);\r\n    };\r\n\r\n    const handleDistrictChange = (event) => {\r\n        setDistrictsValue(event.target.value);\r\n    };\r\n\r\n    const handleStatesChange = (event) => {\r\n        setStatesValue(event.target.value);\r\n        setDisable(false);\r\n        const getDistricts = async () => {\r\n            await fetch(DATA_URL_DISTRICTS + event.target.value)\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((json) => {\r\n                    setDistricts(json.districts);\r\n                });\r\n        }\r\n\r\n        getDistricts();\r\n    };\r\n\r\n    const handleCheckSlots = () => {\r\n        if (valueRadio === 'pincode') {\r\n            const getDataByPincode = async () => {\r\n                await fetch(DATA_URL_PINCODE + valuePincode + '&date=' + getDateData(new Date()))\r\n                    .then((response) => {\r\n                        if (!response.ok) {\r\n                            setDataData(true);\r\n                        }\r\n                        else {\r\n                            setDataData(false);\r\n                            return response.json();\r\n                        }\r\n                    })\r\n                    .then((json) => {\r\n                        if (json === undefined || json.centers.length === 0) { setDataData(true); }\r\n                        else {\r\n                            setDataData(false);\r\n                            setData(json.centers);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        setDataData(true);\r\n                        console.log(error);\r\n                    });\r\n            }\r\n\r\n            getDataByPincode();\r\n        }\r\n        else {\r\n            const getDataByDistrict = async () => {\r\n                await fetch(DATA_DISTRICTS + valueDistricts + '&date=' + getDateData(new Date()))\r\n                    .then((response) => {\r\n                        return response.json();\r\n                    })\r\n                    .then((json) => {\r\n                        setData(json.centers);\r\n                    });\r\n            }\r\n\r\n            getDataByDistrict();\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getStates();\r\n    }, []);\r\n\r\n    return (\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12}>\r\n                <Typography variant=\"h2\" align=\"center\">\r\n                    Vaccination Slot Finder\r\n                </Typography>\r\n            </Grid>\r\n            <Grid container spacing={gridSpacing}>\r\n                <Grid item xs={12} sm={3}>\r\n                    <Grid container direction=\"column\" justify=\"center\" spacing={gridSpacing}>\r\n                        <Grid item xs={12}>\r\n                            <FormControl component=\"fieldset\">\r\n                                <RadioGroup aria-label=\"select\" name=\"select\" value={valueRadio} onChange={handleRadioChange}>\r\n                                    <FormControlLabel value=\"pincode\" control={<Radio color=\"primary\" />} label=\"Pincode\" />\r\n                                    <FormControlLabel value=\"district\" control={<Radio color=\"primary\" />} label=\"District\" />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        {status ? (\r\n                            <Grid item xs={12}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                    <InputLabel id=\"selectStates\">States</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"selectStates\"\r\n                                        id=\"selectStates\"\r\n                                        onChange={handleStatesChange}\r\n                                        value={valueStates}\r\n                                        label=\"States\"\r\n                                    >\r\n                                        {Object.keys(dataStates).map((data, index) => (\r\n                                            <MenuItem key={index} value={data}>{dataStates[data].state_name}</MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl} disabled={valueDisable}>\r\n                                    <InputLabel id=\"selectDistricts\">Districts</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"selectDistricts\"\r\n                                        id=\"selectDistricts\"\r\n                                        onChange={handleDistrictChange}\r\n                                        value={valueDistricts}\r\n                                        label=\"Districts\"\r\n                                    >\r\n                                        {Object.keys(dataDistricts).map((data, index) => (\r\n                                            <MenuItem key={index} value={dataDistricts[data].district_id}>{dataDistricts[data].district_name}</MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        ) :\r\n                            <Grid item xs={12}>\r\n                                <form noValidate autoComplete=\"off\">\r\n                                    <TextField\r\n                                        error={isData}\r\n                                        inputMode=\"numeric\"\r\n                                        className={classes.formControl}\r\n                                        id=\"pincode\"\r\n                                        onBlur={handlePincodeChange}\r\n                                        label=\"Pincode\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </form>\r\n                            </Grid>\r\n                        }\r\n                        <Grid item xs={12}>\r\n                            <Button size=\"large\" className={classes.formControl} variant=\"contained\" color=\"primary\" onClick={handleCheckSlots}>\r\n                                Check Slots\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {dataData.length > 0 ?\r\n                    <Grid item xs={12} sm={9}>\r\n                        {!isData ? dataData && Object.keys(dataData).map((data, index) => (\r\n                            <Card key={index} className={classes.dataCard}>\r\n                                <CardContent>\r\n                                    <Grid container>\r\n                                        <Grid item xs={9} className={classes.space}>\r\n                                            {dataData[data].name}\r\n                                            <div className={classes.secondaryText}>\r\n                                                {dataData[data].address}, {dataData[data].state_name} - {dataData[data].pincode}\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item xs={3} container justify=\"flex-end\" className={classes.colorSuccess}>\r\n                                            <Chip style={{ backgroundColor: dataData[data].fee_type === 'Paid' ? theme.palette.warning.main : theme.palette.success.main }} label={dataData[data].fee_type} />\r\n                                        </Grid>\r\n                                        {Object.keys(dataData[data].sessions).map((sessions, index) => (\r\n                                            <Grid key={index} container className={classes.dataCard}>\r\n                                                <Grid item xs={6}>\r\n                                                    {dataData[data].sessions[sessions].date}\r\n                                                </Grid>\r\n                                                <Grid item xs={6} container justify=\"flex-end\">\r\n                                                    Age: {dataData[data].sessions[sessions].min_age_limit}+\r\n                                                </Grid>\r\n                                                <Grid item xs={6} style={{ color: dataData[data].sessions[sessions].available_capacity_dose1 === 0 ? theme.palette.error.main : theme.palette.success.main }}>\r\n                                                    Dose 1: {dataData[data].sessions[sessions].available_capacity_dose1} <div> {dataData[data].sessions[sessions].vaccine} </div>\r\n                                                </Grid>\r\n                                                <Grid item xs={6} style={{ color: dataData[data].sessions[sessions].available_capacity_dose2 === 0 ? theme.palette.error.main : theme.palette.success.main }}>\r\n                                                    Dose 2: {dataData[data].sessions[sessions].available_capacity_dose2} <div> {dataData[data].sessions[sessions].vaccine} </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </Card>\r\n                        )) :\r\n                            <Card className={classes.dataCard}>\r\n                                <CardContent>\r\n                                    No slots available\r\n                                </CardContent>\r\n                            </Card>\r\n                        }\r\n                    </Grid>\r\n                    : <Grid item xs={12} sm={9}>\r\n                        <Card className={classes.dataCard}>\r\n                            <CardContent>Please enter your pincode or select district</CardContent>\r\n                        </Card>\r\n                    </Grid>}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Vaccination;\r\n"],"sourceRoot":""}